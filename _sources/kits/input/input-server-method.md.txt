:::{cpp:class} BInputServerMethod
:::

# BInputServerMethod

## Constructor and Destructor

::::{abi-group}
:::{cpp:function} BInputServerMethod::BInputServerMethod(const char* name, const uchar* icon)
:::

Creates a new {hclass}`BInputServerMethod` object. You can initialize the
object—set initial values, spawn threads, etc.—either here or in the
inherited function {cpp:func}`InitCheck() <BInputServerFilter::InitCheck>`
function, which is called immediately after the constructor.

{hparam}`name` is a textual name describing the input method, and
{hparam}`icon` is the raw data for a 16x16 8-bit icon built from the
standard BeOS palette. This name and icon will be displayed in the input
method menu (the little keyboard icon in the Deskbar). When the user
selects your input method from the menu, your {cpp:func}`MethodActivated()
<BInputServerMethod::MethodActivated>` function is called.
::::

::::{abi-group}
:::{cpp:function} BInputServerMethod::BInputServerMethod()
:::

Deletes the {hclass}`BInputServerMethod` object. The destructor is invoked
by the Input Server only—you never delete a {hclass}`BInputServerMethod`
object from your own code. If this object has spawned its own threads or
allocated memory on the heap, it must clean up after itself here.
::::

## Hook Functions

::::{abi-group}
:::{cpp:function} virtual status_t BInputServerMethod::MethodActivated(bool active)
:::

The {hmethod}`MethodActivated()` hook function is invoked by the Input
Server when the user activates your input method ({hparam}`active` is
{cpp:expr}`true`) or deactivates it ({hparam}`active` is
{cpp:expr}`false`). This is your chance to activate any helper threads or
loopers to the fact that you'll be handling input events soon.

Return {cpp:enumerator}`B_OK` if that's OK, or something else if it's not.
The default implementation returns {cpp:enumerator}`B_OK`.
::::

## Member Functions

::::{abi-group}
:::{cpp:function} status_t BInputServerMethod::EnqueueMessage(BMessage* message)
:::

Inserts the specified {hparam}`message` into the Input Server's event
queue; the message continues down-stream from this point, passing through
additional active input methods and input filters on its way to the App
Server.
::::

::::{abi-group}
:::{cpp:function} status_t BInputServerMethod::SetName(const char* name)
:::

Changes your input method's name, as found in the input method menu of the
Deskbar.

The Input Server makes a copy of {hparam}`name`.
::::

::::{abi-group}
:::{cpp:function} status_t BInputServerMethod::SetIcon(const uchar* icon)
:::

Changes your input method's icon, as found in the input method menu of the
Deskbar. {hparam}`icon` should be raw data for a 16x16 8-bit icon built
from the standard BeOS palette.

The Input Server makes a copy of {hparam}`icon`.
::::

::::{abi-group}
:::{cpp:function} status_t BInputServerMethod::SetMenu(const BMenu* menu, const BMessenger target)
:::

Lets you assign a menu to your input method's entry in the input method
menu of the Deskbar. Messages generated by the menu are sent to target.

Passing a {cpp:expr}`NULL` {hparam}`menu` disables your input method's
menu.

You retain ownership of {hparam}`menu`; be careful not to delete it while
the Input Server is still using it.
::::
